1. Символьный код свойства элемента инфоблока 
следует писать заглавными буквами латинского алфавита, например:
CITY, BALANCE, COUNT

2. При создании свойств типа “Привязка к элементами” или “Привязка к разделам” 
в настройках всегда указывать инфоблок, 
с элементами которого будет связано это свойство

3. В форме редактирования элемента инфоблока, 
всегда удалять неиспользуемые поля, 
например если мы создаем инфоблок “Новости”, 
в элементах которого будет необходимо заполнять только название, 
дату, и картинку анонса, то необходимо удалить все остальные поля: 
Активность, дата окончания активности, описание анонса и т.д., также необходимо удалять неиспользуемые вкладки

4. Выносим в папку local все шаблоны, кастомные компоненты, init.php.

Структура local должна быть:
/local/components/msnet/компоненты
/local/php_interface/init.php
/local/templates/шаблоны

Подробнее про папку local: https://dev.1c-bitrix.ru/community/blogs/vad/local-folder.php


5. init.php должен содержать только подключения файлов, и объявления констант.

Для подключения файлов классов рекомендуется использовать функцию битрикса CModule::AddAutoloadClasses.

Структура:

./init.php
./includes/functions.php - содержит функции
./includes/handlers.php - содержит обработчики событий
./classes/classX.php - файл класса

В init.php остаются объявления констант, 
и подключения файлов классов, функций, обработчиков, и других при необходимости.

Все это нужно для того, чтобы init.php не засорялся. 
Разделяя функции и обработчики событий, на отдельные файлы, 
мы упрощаем жизнь тем людям, которые будут заниматься поддержкой и доработкой сайта.


6. Все подключаемые внешние скрипты наподобие яндекс и гугл метрики, перезвонилки и т.п. 
выносить в отдельный файл, например /_include/metrics.php и уже его подключать в футере.
Не засоряется сам файл футера, так же такой файл с метриками можно менять прямо через админку, 
что упростит поддержку.

7. Никогда не модифицируем файлы в папке /bitrix/. За исключением следующих файлов:

/bitrix/.settings.php
/bitrix/php_interface/dbconn.php
/bitrix/modules/main/include.php
/bitrix/modules/main/include/prolog_after.php

Последние два файла редактируем при необходимости поломать битрикс.
В случае острой необходимости модифицировать стандартный компонент или модуль, 
выносим их в отдельной пространство имен, и папку local

8. Папку /bitrix/ добавляем в .gitignore

9. В шаблоне компонента не делаем запросы к базе или сложной логики. 
Запросы к базе и логику выносим в файл компонента component.php или result_modifier.php, component_epilog.php

10. При установке дистрибутива 1С-Битрикс пароль администратора ставим сразу безопасный, 
сгенерированный любым генератором паролей например: s9xn4FpLvE0n4zoCGKnx

11. По возможности выносим текстовые блоки в подлючаемые области bitrix:main.include. 
Тогда их смогут редактировать менеджеры без участия программиста. 
Файлы с подключаемыми областями храним в папке include, в той директории где они подключаются. 
Например если на странице /contacts/ необходимо сделать подключаемую область, 
в которой выводился бы текст из файла, то создаем директорию /contacts/include/ 
в ней создаем файл contacts_text.php и записываем в него текст, 
который можно будет редактировать в режиме правки. 

Пример вызова включаемой области:
<?
$APPLICATION->IncludeComponent("bitrix:main.include", "", Array(
    "AREA_FILE_SHOW" => "file",
    "PATH" => "include/some_text.php",
    "AREA_FILE_SUFFIX" => "inc",
    "AREA_FILE_RECURSIVE" => "N",
    "EDIT_TEMPLATE" => ""
        )
);
?>

12. При написании своего компонента, оформляем компонент в соответствие с рекомендациями документации по битриксу
Подробнее структура компонента https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=43&LESSON_ID=2818&LESSON_PATH=3913.4565.2818

13. В шаблонах компонента должна быть реализована поддержка эрмитажа с возможность добавления, редактирования и добавления элементов инфоблока, редактирование включаемых областей.

14. Файл /ajax.php в корне сайта, используется для обмена данными с сервером без перезагрузки страницы, должен быть входной точкой, 
где принимаются данные, и содержать минимум бизнес-логики.
Бизнес-логика выноситься в классы, методы, функции, компоненты.